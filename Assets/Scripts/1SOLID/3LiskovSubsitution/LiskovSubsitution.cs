using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 리스코프 치환 원칙(LSP) : 파생된 클래스가 기본 클래스로 대체될 수 있어야 한다.
// 상속을 사용하여 기본 클래스와 서브 클래스를 구분하되, 서브 클래스가 기본 클래스로 전환되어도 문제없도록 본질은 지키도록 한다.
// 상속받은 서브 클래스가 기본 클래스의 일부만 필요하다면 이는 리스코프 치환 원칙에 위배된다.

// 리스코프 치환 원칙의 유의사항은 다음과 같다.
// 서브 클래스를 설정할 때 기능을 제거하면 리스코프 치환을 위반하게 될 가능성이 크다 : 상속받은 서브 클래스가 온전히 기본 클래스의 역할도 수행할 수 있어야 한다.
// 추상화를 단순하게 한다 : 기본 클래스에 로직이 많다면 이 원칙을 위배하기 쉬워진다. 기본 클래스와 서브 클래스 간의 로직을 적절히 분배하는 게 좋다.
// 서브 클래스는 기본 클래스와 동일한 공용 멤버를 가져야 한다 : 이 공용 멤버는 호출 시 동일한 서명을 갖고 동일한 동작을 취해야 한다.
// 클래스 계층 구조를 수립할 때 클래스 API를 고려한다 : 역할이 비슷하더라도 원칙에 위배된다면 더 다양하게 클래스 계층을 나누어 관리하는 게 유익하다.
// 상속보다는 합성을 우선시한다 : 상속을 통한 기능 전달보다는, 특정한 기능을 수행할 수 있도록 인터페이스 또는 별도의 클래스를 사용한다. (특정 기능의 클래스를 만든 후 컴포넌트 추가 등)
public class LiskovSubsitution : MonoBehaviour
{

}